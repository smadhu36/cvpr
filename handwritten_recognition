from sklearn.datasets import load_digits 
from sklearn.model_selection import train_test_split 
from sklearn.naive_bayes import GaussianNB 
from sklearn.metrics import accuracy_score, classification_report 
import matplotlib.pyplot as plt 
# Load handwritten digits dataset (0 to 9) 
digits = load_digits() 
# Display some sample digits 
plt.figure(figsize=(8, 4)) 
for i in range(8): 
plt.subplot(2, 4, i+1) 
plt.imshow(digits.images[i], cmap='gray') 
plt.title(f'Label: {digits.target[i]}') 
plt.axis('off') 
plt.suptitle("Sample Handwritten Digits") 
plt.show() 
# Prepare data 
X = digits.data  # Flattened 8x8 images (64 features) 
y = digits.target 
# Split into training and testing sets 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) 
# Create a Naive Bayes model 
model = GaussianNB() 
# Train the model 
model.fit(X_train, y_train) 
# Predict on test set
  y_pred = model.predict(X_test) 
# Evaluate the model 
accuracy = accuracy_score(y_test, y_pred) 
print(f"Accuracy: {accuracy * 100:.2f}%")
